"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var BasicRouter_1 = require("../BasicRouter");
var RestGetRouter = (function (_super) {
    __extends(RestGetRouter, _super);
    function RestGetRouter(context, settings) {
        var _this = _super.call(this, context, settings) || this;
        _this.router = function (req, res, _next) {
            _this.spr = _this.getHttpClient();
            var endpointUrl = _this.util.buildEndpointUrl(req);
            _this.logger.info('\nGET: ' + endpointUrl);
            var agent = _this.util.isUrlHttps(endpointUrl) ? _this.settings.agent : undefined;
            var isDoc = endpointUrl.split('?')[0].toLowerCase().endsWith('/$value');
            var headers = {};
            var additionalOptions = {};
            if (isDoc) {
                additionalOptions.encoding = null;
            }
            var ignoreHeaders = [
                'host', 'referer', 'origin',
                'connection', 'cache-control', 'user-agent',
                'accept-encoding', 'x-requested-with', 'accept-language'
            ];
            Object.keys(req.headers).forEach(function (prop) {
                if (ignoreHeaders.indexOf(prop.toLowerCase()) === -1) {
                    if (prop.toLowerCase() === 'accept' && req.headers[prop] !== '*/*') {
                        headers.Accept = req.headers[prop];
                    }
                    else if (prop.toLowerCase() === 'content-type') {
                        headers['Content-Type'] = req.headers[prop];
                    }
                    else {
                        headers[prop] = req.headers[prop];
                    }
                }
            });
            _this.spr.get(endpointUrl, __assign(__assign({ headers: headers }, additionalOptions), { agent: agent }))
                .then(function (r) {
                var _a, _b, _c;
                if (typeof r.body['odata.nextLink'] === 'string') {
                    r.body['odata.nextLink'] = _this.util.buildProxyEndpointUrl(r.body['odata.nextLink']);
                }
                if (r.body.d && typeof r.body.d.__next === 'string') {
                    r.body.d.__next = _this.util.buildProxyEndpointUrl(r.body.d.__next);
                }
                if (typeof r.body['odata.metadata'] === 'string') {
                    r.body['odata.metadata'] = _this.util.buildProxyEndpointUrl(r.body['odata.metadata']);
                }
                if ((_c = (_b = (_a = r.body) === null || _a === void 0 ? void 0 : _a.d) === null || _b === void 0 ? void 0 : _b.__metadata) === null || _c === void 0 ? void 0 : _c.uri) {
                    r.body.d.__metadata.uri = _this.util.buildProxyEndpointUrl(r.body.d.__metadata.uri);
                }
                return r;
            })
                .then(function (r) { return _this.transmitResponse(res, r); })
                .catch(function (err) { return _this.transmitError(res, err); });
        };
        return _this;
    }
    return RestGetRouter;
}(BasicRouter_1.BasicRouter));
exports.RestGetRouter = RestGetRouter;
//# sourceMappingURL=restGet.js.map