"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var request = require("request");
var BasicRouter_1 = require("../BasicRouter");
var GetRouter = (function (_super) {
    __extends(GetRouter, _super);
    function GetRouter(context, settings) {
        var _this = _super.call(this, context, settings) || this;
        _this.router = function (req, res, _next) {
            if (_this.serveLocalResources(req, res)) {
                return;
            }
            _this.spr = _this.getHttpClient();
            var endpointUrl = _this.util.buildEndpointUrl(req);
            _this.logger.info('\nGET (generic): ' + endpointUrl);
            var agent = _this.util.isUrlHttps(endpointUrl) ? _this.settings.agent : undefined;
            var headers = {};
            var ignoreHeaders = ['host', 'referer', 'origin', 'accept-encoding', 'connection', 'if-none-match'];
            Object.keys(req.headers).forEach(function (prop) {
                if (ignoreHeaders.indexOf(prop.toLowerCase()) === -1) {
                    if (prop.toLowerCase() === 'accept' && req.headers[prop] !== '*/*') {
                        headers.Accept = req.headers[prop];
                    }
                    else if (prop.toLowerCase() === 'content-type') {
                        headers['Content-Type'] = req.headers[prop];
                    }
                    else {
                        headers[prop] = req.headers[prop];
                    }
                }
            });
            var advanced = {
                json: false,
                processData: false,
                encoding: null
            };
            var ext = endpointUrl.split('?')[0].split('.').pop().toLowerCase();
            if (['js', 'css', 'aspx', 'css', 'html', 'json', 'axd'].indexOf(ext) !== -1) {
                delete advanced.encoding;
                headers.Accept = 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8';
            }
            if (endpointUrl.indexOf('/ScriptResource.axd') !== -1) {
                var axdUrlArr = endpointUrl.split('/ScriptResource.axd');
                endpointUrl = axdUrlArr[0].split('/').splice(0, 3).join('/') + "/ScriptResource.axd" + axdUrlArr[1];
                request.get({ uri: endpointUrl, agent: agent }).pipe(res);
                return;
            }
            _this.spr.get(endpointUrl, __assign(__assign({ headers: headers }, advanced), { agent: agent }))
                .then(function (r) { return _this.transmitResponse(res, r); })
                .catch(function (err) { return _this.transmitError(res, err); });
        };
        return _this;
    }
    GetRouter.prototype.serveLocalResources = function (req, res) {
        var staticIndexUrl = '/index.html';
        if (req.url !== '/') {
            staticIndexUrl = req.url.split('?')[0];
        }
        else {
            var pageContent = String(fs.readFileSync(path.join(this.settings.staticRoot, staticIndexUrl)));
            pageContent = pageContent.replace('##proxyVersion#', this.settings.metadata.version);
            res.send(pageContent);
            return true;
        }
        if (req.url === '/config') {
            var response = {
                siteUrl: this.ctx.siteUrl,
                username: this.ctx.authOptions.username || 'Add-In'
            };
            res.json(response);
            return true;
        }
        if (fs.existsSync(path.join(this.settings.staticRoot, staticIndexUrl))) {
            res.sendFile(path.join(this.settings.staticRoot, staticIndexUrl));
            return true;
        }
        return false;
    };
    return GetRouter;
}(BasicRouter_1.BasicRouter));
exports.GetRouter = GetRouter;
//# sourceMappingURL=genericGet.js.map