"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var BasicRouter_1 = require("../BasicRouter");
var RestBatchRouter = (function (_super) {
    __extends(RestBatchRouter, _super);
    function RestBatchRouter(context, settings) {
        var _this = _super.call(this, context, settings) || this;
        _this.router = function (request, response, _next) {
            var endpointUrl = _this.util.buildEndpointUrl(request);
            _this.logger.info('\nPOST (batch): ' + endpointUrl);
            var reqBody = '';
            if (request.body) {
                reqBody = request.body;
                _this.processBatchRequest(reqBody, request, response);
            }
            else {
                request.on('data', function (chunk) { return reqBody += chunk; });
                request.on('end', function () { return _this.processBatchRequest(reqBody, request, response); });
            }
        };
        return _this;
    }
    RestBatchRouter.prototype.processBatchRequest = function (body, req, res) {
        var _this = this;
        var endpointUrl = this.util.buildEndpointUrl(req);
        body = req.rawBody;
        var transform = this.settings.processBatchMultipartBody;
        if (transform && typeof transform === 'function') {
            body = transform(body);
        }
        else {
            var regExp_1 = new RegExp('^(POST|GET|MERGE|DELETE) https?://localhost(:[0-9]+)?/', 'i');
            var origin_1 = this.ctx.siteUrl.split('/').splice(0, 3).join('/');
            body = body.split('\n').map(function (line) {
                if (regExp_1.test(line)) {
                    var parts = line.split(' ');
                    var method = parts.shift();
                    var version = parts.pop();
                    var endpoint = parts.join(' ');
                    endpoint = origin_1 + "/" + endpoint.split('/').splice(3).join('/');
                    line = method + " " + endpoint + " " + version;
                }
                return line;
            }).join('\n');
        }
        this.logger.verbose('Request body:', body);
        this.spr = this.getHttpClient();
        var agent = this.util.isUrlHttps(endpointUrl) ? this.settings.agent : undefined;
        this.spr.requestDigest(endpointUrl.split('/_api')[0])
            .then(function (digest) {
            var headers = {};
            var ignoreHeaders = [
                'host', 'referer', 'origin',
                'if-none-match', 'connection', 'cache-control', 'user-agent',
                'accept-encoding', 'x-requested-with', 'accept-language'
            ];
            Object.keys(req.headers).forEach(function (prop) {
                if (ignoreHeaders.indexOf(prop.toLowerCase()) === -1) {
                    if (prop.toLowerCase() === 'accept' && req.headers[prop] !== '*/*') {
                        headers['Accept'] = req.headers[prop];
                    }
                    else if (prop.toLowerCase() === 'content-type') {
                        headers['Content-Type'] = req.headers[prop];
                    }
                    else if (prop.toLowerCase() === 'x-requestdigest') {
                    }
                    else if (prop.toLowerCase() === 'content-length') {
                    }
                    else {
                        headers[prop] = req.headers[prop];
                    }
                }
            });
            headers = __assign(__assign({}, headers), { 'X-RequestDigest': headers['X-RequestDigest'] || digest });
            return _this.spr.post(endpointUrl, { headers: headers, body: body, agent: agent, json: false });
        })
            .then(function (r) { return _this.transmitResponse(res, r); })
            .catch(function (err) { return _this.transmitError(res, err); });
    };
    return RestBatchRouter;
}(BasicRouter_1.BasicRouter));
exports.RestBatchRouter = RestBatchRouter;
//# sourceMappingURL=restBatch.js.map