"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var BasicRouter_1 = require("../BasicRouter");
var RestPostRouter = (function (_super) {
    __extends(RestPostRouter, _super);
    function RestPostRouter(context, settings) {
        var _this = _super.call(this, context, settings) || this;
        _this.router = function (request, response, _next) {
            var endpointUrl = _this.util.buildEndpointUrl(request);
            _this.logger.info('\nPOST: ' + endpointUrl);
            var reqBody = '';
            if (request.body) {
                reqBody = request.body;
                _this.processPostRequest(reqBody, request, response);
            }
            else {
                request.on('data', function (chunk) { return reqBody += chunk; });
                request.on('end', function () { return _this.processPostRequest(reqBody, request, response); });
            }
        };
        _this.processPostRequest = function (body, req, res) {
            _this.spr = _this.getHttpClient();
            var endpointUrl = _this.util.buildEndpointUrl(req);
            _this.logger.verbose('Request body:', body);
            var agent = _this.util.isUrlHttps(endpointUrl) ? _this.settings.agent : undefined;
            _this.spr.requestDigest(endpointUrl.split('/_api')[0])
                .then(function (digest) {
                var headers = {};
                var jsonOption = { json: true };
                var ignoreHeaders = [
                    'host', 'referer', 'origin', 'x-requestdigest',
                    'connection', 'cache-control', 'user-agent',
                    'accept-encoding', 'x-requested-with', 'accept-language'
                ];
                Object.keys(req.headers).forEach(function (prop) {
                    if (ignoreHeaders.indexOf(prop.toLowerCase()) === -1) {
                        if (prop.toLowerCase() === 'accept' && req.headers[prop] !== '*/*') {
                            headers['Accept'] = req.headers[prop];
                        }
                        else if (prop.toLowerCase() === 'content-type') {
                            headers['Content-Type'] = req.headers[prop];
                        }
                        else if (prop.toLowerCase() === 'x-requestdigest') {
                            headers['X-RequestDigest'] = req.headers[prop];
                        }
                        else {
                            headers[prop] = req.headers[prop];
                        }
                    }
                });
                headers = __assign(__assign({}, headers), { 'X-RequestDigest': headers['X-RequestDigest'] || digest });
                if (endpointUrl.toLowerCase().indexOf('/attachmentfiles/add') !== -1 ||
                    endpointUrl.toLowerCase().indexOf('/files/add') !== -1 ||
                    endpointUrl.toLowerCase().indexOf('/startupload') !== -1 ||
                    endpointUrl.toLowerCase().indexOf('/continueupload') !== -1 ||
                    endpointUrl.toLowerCase().indexOf('/finishupload') !== -1) {
                    body = req.buffer;
                    jsonOption.json = false;
                    jsonOption.processData = false;
                }
                if (typeof body === 'object' && Object.keys(body).length === 0) {
                    if (endpointUrl.toLowerCase().indexOf('/_vti_bin/client.svc') !== -1 ||
                        endpointUrl.toLowerCase().indexOf('/_api/contextinfo') !== -1) {
                        body = '{}';
                    }
                    Object.keys(headers).forEach(function (prop) {
                        if (prop.toLowerCase() === 'content-length') {
                            delete headers[prop];
                        }
                    });
                }
                return _this.spr.post(endpointUrl, __assign(__assign({ headers: headers, body: body }, jsonOption), { agent: agent }));
            })
                .then(function (r) { return _this.transmitResponse(res, r); })
                .catch(function (err) { return _this.transmitError(res, err); });
        };
        return _this;
    }
    return RestPostRouter;
}(BasicRouter_1.BasicRouter));
exports.RestPostRouter = RestPostRouter;
//# sourceMappingURL=restPost.js.map