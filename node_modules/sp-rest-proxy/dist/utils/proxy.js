"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var spauth = require("node-sp-auth");
var spRequest = require("sp-request");
var url_1 = require("url");
var ProxyUtils = (function () {
    function ProxyUtils(ctx, settings) {
        this.ctx = ctx;
        this.settings = settings;
    }
    ProxyUtils.prototype.getAuthOptions = function () {
        return spauth.getAuth(this.ctx.siteUrl, this.ctx.authOptions);
    };
    ProxyUtils.prototype.getCachedRequest = function (spr) {
        this.spr = spr || spRequest.create(this.ctx.authOptions);
        return this.spr;
    };
    ProxyUtils.prototype.isOnPrem = function (url) {
        return url.indexOf('.sharepoint.com') === -1 && url.indexOf('.sharepoint.cn') === -1;
    };
    ProxyUtils.prototype.isUrlHttps = function (url) {
        return url.split('://')[0].toLowerCase() === 'https';
    };
    ProxyUtils.prototype.isUrlAbsolute = function (url) {
        return url.indexOf('http:') === 0 || url.indexOf('https:') === 0;
    };
    ProxyUtils.prototype.buildEndpointUrl = function (req) {
        var reqUrl = typeof req === 'string' ? req : req.originalUrl;
        var strictRelativeUrls = this.settings.strictRelativeUrls;
        if (typeof req === 'object' && req.header('X-ProxyStrict')) {
            strictRelativeUrls = req.header('X-ProxyStrict').toLowerCase() === 'true' ? true : false;
        }
        var siteUrlParsed = url_1.parse(this.ctx.siteUrl);
        var baseUrlArr = siteUrlParsed.pathname.split('/');
        var reqUrlArr = reqUrl.split('?')[0].split('/');
        var len = baseUrlArr.length > reqUrlArr.length ? reqUrlArr.length : baseUrlArr.length;
        var similarity = 0;
        var reqPathName = reqUrl;
        if (!strictRelativeUrls) {
            for (var i = 0; i < len; i += 1) {
                similarity += baseUrlArr[i] === reqUrlArr[i] ? 1 : 0;
            }
            if (similarity < 2) {
                reqPathName = (siteUrlParsed.pathname + "/" + reqUrl).replace(/\/\//g, '/');
            }
            reqPathName = reqPathName.replace(/\/\//g, '/');
        }
        return siteUrlParsed.protocol + "//" + siteUrlParsed.host + reqPathName;
    };
    ProxyUtils.prototype.buildProxyEndpointUrl = function (reqUrl) {
        var spHostUrl = this.ctx.siteUrl.split('/').splice(0, 3).join('/');
        var proxyUrl = reqUrl;
        if (proxyUrl.toLowerCase().indexOf(spHostUrl.toLowerCase()) === 0) {
            proxyUrl = proxyUrl.replace(new RegExp(spHostUrl, 'i'), this.ctx.proxyHostUrl);
        }
        return proxyUrl;
    };
    return ProxyUtils;
}());
exports.ProxyUtils = ProxyUtils;
//# sourceMappingURL=proxy.js.map