{"ast":null,"code":"var _jsxFileName = \"C:\\\\webProjects\\\\project-intake-form\\\\src\\\\components\\\\Table\\\\Table.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { getListAndItems } from \"Components\";\nexport const Table = ({\n  listName,\n  addItem = true,\n  addOptions = {\n    title: \"Add Item\",\n    content: \"Content\",\n    saveButtonText: \"Save\",\n    saveAction: () => {\n      console.log(\"I am saved\");\n    },\n    cancelButtonText: \"Cancel\",\n    cancelAction: () => {\n      console.log(\"I am lost\");\n    }\n  },\n  deleteItem = true,\n  editItem = true,\n  changeItemPermission = true,\n  customActions,\n  options,\n  isDirty = true,\n  handleDirty = dirty => {\n    console.log(`handleDirty Default has been passed '${dirty}'`);\n  },\n  tableTitle\n}) => {\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [actions, setActions] = useState([]);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [dialogTitle, setDialogTitle] = useState();\n  const [dialogContent, setDialogContent] = useState();\n  const [dialogSaveButtonText, setDialogSaveButtonText] = useState();\n  const [dialogSaveAction, setDialogSaveAction] = useState();\n  const [dialogCancelButtonText, setDialogCancelButtonText] = useState();\n  const [dialogCancelAction, setDialogCancelAction] = useState();\n\n  const saveButtonHandler = results => {\n    //@ts-ignore\n    addOptions.saveAction(results);\n    handleDirty(true);\n    setDialogOpen(false);\n  };\n\n  const cancelButtonHandler = results => {\n    //@ts-ignore\n    addOptions.cancelAction(results);\n    setDialogOpen(false);\n  };\n\n  useEffect(() => {\n    if (addItem) {\n      setActions(prevActions => {\n        prevActions.push({\n          //@ts-ignore\n          icon: icons.Add,\n          //@ts-ignore\n          tooltip: \"Add Item\",\n          //@ts-ignore\n          isFreeAction: true,\n          //@ts-ignore\n          onClick: (event, rowdata) => {\n            //@ts-ignore\n            setDialogTitle(addOptions.title); //@ts-ignore\n\n            setDialogContent(addOptions.content); //@ts-ignore\n\n            setDialogSaveButtonText(addOptions.saveButtonText); //@ts-ignore\n\n            setDialogCancelButtonText(addOptions.cancelButtonText); //@ts-ignore\n\n            setDialogCancelAction(() => {\n              return () => {\n                setIsLoading(false); //@ts-ignore\n\n                addOptions.cancelAction();\n              };\n            });\n            setDialogOpen(true);\n          }\n        });\n        return prevActions;\n      });\n    }\n\n    if (deleteItem) {\n      setActions(prevActions => {\n        prevActions.push({\n          //@ts-ignore\n          icon: icons.Delete,\n          //@ts-ignore\n          tooltip: \"Delete Item\",\n          //@ts-ignore\n          onClick: (event, rowdata) => {//TODO: delete item actions\n          }\n        });\n        return prevActions;\n      });\n    }\n\n    if (editItem) {\n      setActions(prevActions => {\n        prevActions.push({\n          //@ts-ignore\n          icon: icons.Edit,\n          //@ts-ignore\n          tooltip: \"Edit Item\",\n          //@ts-ignore\n          onClick: (event, rowdata) => {//TODO: edit item actions\n          }\n        });\n        return prevActions;\n      });\n    }\n\n    if (changeItemPermission) {\n      setActions(prevActions => {\n        prevActions.push({\n          //@ts-ignore\n          icon: icons.People,\n          //@ts-ignore\n          tooltip: \"Change Item Permissions\",\n          //@ts-ignore\n          onClick: (event, rowdata) => {//TODO: change item permissions actions\n          }\n        });\n        return prevActions;\n      });\n    }\n\n    if (customActions) {\n      customActions.map((action, index) => {\n        //@ts-ignore\n        action.icon = icons[action.icon];\n        return setActions(prevActions => {\n          //@ts-ignore\n          prevActions.push(action);\n          return prevActions;\n        });\n      });\n    }\n\n    return () => {};\n  }, []);\n\n  const populateTable = async () => {\n    setIsLoading(true);\n    const list = await getListAndItems(listName);\n\n    if (tableTitle) {\n      setTitle(tableTitle);\n    } else {\n      setTitle(list.title);\n    }\n\n    setColumns(list.columns);\n    setData(list.items);\n    handleDirty(false);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    if (isDirty) {\n      populateTable();\n    }\n\n    return () => {};\n  }, [isDirty]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaterialTable, {\n    columns: columns,\n    data: data,\n    title: title,\n    options: options,\n    actions: actions,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["C:/webProjects/project-intake-form/src/components/Table/Table.tsx"],"names":["React","useState","useEffect","MaterialTable","getListAndItems","Table","listName","addItem","addOptions","title","content","saveButtonText","saveAction","console","log","cancelButtonText","cancelAction","deleteItem","editItem","changeItemPermission","customActions","options","isDirty","handleDirty","dirty","tableTitle","data","setData","columns","setColumns","setTitle","actions","setActions","dialogOpen","setDialogOpen","isLoading","setIsLoading","dialogTitle","setDialogTitle","dialogContent","setDialogContent","dialogSaveButtonText","setDialogSaveButtonText","dialogSaveAction","setDialogSaveAction","dialogCancelButtonText","setDialogCancelButtonText","dialogCancelAction","setDialogCancelAction","saveButtonHandler","results","cancelButtonHandler","prevActions","push","icon","icons","Add","tooltip","isFreeAction","onClick","event","rowdata","Delete","Edit","People","map","action","index","populateTable","list","items"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,QAApB,EAA8BC,SAA9B,QAAyD,OAAzD;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,eAAT,QAAgC,YAAhC;AAiBA,OAAO,MAAMC,KAAqB,GAAG,CAAC;AACpCC,EAAAA,QADoC;AAEpCC,EAAAA,OAAO,GAAG,IAF0B;AAGpCC,EAAAA,UAAU,GAAG;AACXC,IAAAA,KAAK,EAAE,UADI;AAEXC,IAAAA,OAAO,EAAE,SAFE;AAGXC,IAAAA,cAAc,EAAE,MAHL;AAIXC,IAAAA,UAAU,EAAE,MAAM;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,KANU;AAOXC,IAAAA,gBAAgB,EAAE,QAPP;AAQXC,IAAAA,YAAY,EAAE,MAAM;AAClBH,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;AAVU,GAHuB;AAepCG,EAAAA,UAAU,GAAG,IAfuB;AAgBpCC,EAAAA,QAAQ,GAAG,IAhByB;AAiBpCC,EAAAA,oBAAoB,GAAG,IAjBa;AAkBpCC,EAAAA,aAlBoC;AAmBpCC,EAAAA,OAnBoC;AAoBpCC,EAAAA,OAAO,GAAG,IApB0B;AAqBpCC,EAAAA,WAAW,GAAIC,KAAD,IAAoB;AAChCX,IAAAA,OAAO,CAACC,GAAR,CAAa,wCAAuCU,KAAM,GAA1D;AACD,GAvBmC;AAwBpCC,EAAAA;AAxBoC,CAAD,KAyB/B;AACJ,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC2B,OAAD,EAAUC,UAAV,IAAwB5B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQqB,QAAR,IAAoB7B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC8B,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACgC,UAAD,EAAaC,aAAb,IAA8BjC,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACkC,SAAD,EAAYC,YAAZ,IAA4BnC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACoC,WAAD,EAAcC,cAAd,IAAgCrC,QAAQ,EAA9C;AACA,QAAM,CAACsC,aAAD,EAAgBC,gBAAhB,IAAoCvC,QAAQ,EAAlD;AACA,QAAM,CAACwC,oBAAD,EAAuBC,uBAAvB,IAAkDzC,QAAQ,EAAhE;AACA,QAAM,CAAC0C,gBAAD,EAAmBC,mBAAnB,IAA0C3C,QAAQ,EAAxD;AACA,QAAM,CAAC4C,sBAAD,EAAyBC,yBAAzB,IAAsD7C,QAAQ,EAApE;AACA,QAAM,CAAC8C,kBAAD,EAAqBC,qBAArB,IAA8C/C,QAAQ,EAA5D;;AAEA,QAAMgD,iBAAiB,GAAIC,OAAD,IAAqB;AAC7C;AACA1C,IAAAA,UAAU,CAACI,UAAX,CAAsBsC,OAAtB;AACA3B,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAW,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GALD;;AAOA,QAAMiB,mBAAmB,GAAID,OAAD,IAAqB;AAC/C;AACA1C,IAAAA,UAAU,CAACQ,YAAX,CAAwBkC,OAAxB;AACAhB,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAJD;;AAMAhC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,OAAJ,EAAa;AACXyB,MAAAA,UAAU,CAAEoB,WAAD,IAAiB;AAC1BA,QAAAA,WAAW,CAACC,IAAZ,CAAiB;AACf;AACAC,UAAAA,IAAI,EAAEC,KAAK,CAACC,GAFG;AAGf;AACAC,UAAAA,OAAO,EAAE,UAJM;AAKf;AACAC,UAAAA,YAAY,EAAE,IANC;AAOf;AACAC,UAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3B;AACAvB,YAAAA,cAAc,CAAC9B,UAAU,CAACC,KAAZ,CAAd,CAF2B,CAG3B;;AACA+B,YAAAA,gBAAgB,CAAChC,UAAU,CAACE,OAAZ,CAAhB,CAJ2B,CAK3B;;AACAgC,YAAAA,uBAAuB,CAAClC,UAAU,CAACG,cAAZ,CAAvB,CAN2B,CAO3B;;AACAmC,YAAAA,yBAAyB,CAACtC,UAAU,CAACO,gBAAZ,CAAzB,CAR2B,CAS3B;;AACAiC,YAAAA,qBAAqB,CAAC,MAAM;AAC1B,qBAAO,MAAM;AACXZ,gBAAAA,YAAY,CAAC,KAAD,CAAZ,CADW,CAEX;;AACA5B,gBAAAA,UAAU,CAACQ,YAAX;AACD,eAJD;AAKD,aANoB,CAArB;AAOAkB,YAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AA1Bc,SAAjB;AA6BA,eAAOkB,WAAP;AACD,OA/BS,CAAV;AAgCD;;AAED,QAAInC,UAAJ,EAAgB;AACde,MAAAA,UAAU,CAAEoB,WAAD,IAAiB;AAC1BA,QAAAA,WAAW,CAACC,IAAZ,CAAiB;AACf;AACAC,UAAAA,IAAI,EAAEC,KAAK,CAACO,MAFG;AAGf;AACAL,UAAAA,OAAO,EAAE,aAJM;AAKf;AACAE,UAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,OAAR,KAAoB,CAC3B;AACD;AARc,SAAjB;AAWA,eAAOT,WAAP;AACD,OAbS,CAAV;AAcD;;AAED,QAAIlC,QAAJ,EAAc;AACZc,MAAAA,UAAU,CAAEoB,WAAD,IAAiB;AAC1BA,QAAAA,WAAW,CAACC,IAAZ,CAAiB;AACf;AACAC,UAAAA,IAAI,EAAEC,KAAK,CAACQ,IAFG;AAGf;AACAN,UAAAA,OAAO,EAAE,WAJM;AAKf;AACAE,UAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,OAAR,KAAoB,CAC3B;AACD;AARc,SAAjB;AAWA,eAAOT,WAAP;AACD,OAbS,CAAV;AAcD;;AAED,QAAIjC,oBAAJ,EAA0B;AACxBa,MAAAA,UAAU,CAAEoB,WAAD,IAAiB;AAC1BA,QAAAA,WAAW,CAACC,IAAZ,CAAiB;AACf;AACAC,UAAAA,IAAI,EAAEC,KAAK,CAACS,MAFG;AAGf;AACAP,UAAAA,OAAO,EAAE,yBAJM;AAKf;AACAE,UAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,OAAR,KAAoB,CAC3B;AACD;AARc,SAAjB;AAWA,eAAOT,WAAP;AACD,OAbS,CAAV;AAcD;;AAED,QAAIhC,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAAC6C,GAAd,CAAkB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACnC;AACAD,QAAAA,MAAM,CAACZ,IAAP,GAAcC,KAAK,CAACW,MAAM,CAACZ,IAAR,CAAnB;AAEA,eAAOtB,UAAU,CAAEoB,WAAD,IAAiB;AACjC;AACAA,UAAAA,WAAW,CAACC,IAAZ,CAAiBa,MAAjB;AACA,iBAAOd,WAAP;AACD,SAJgB,CAAjB;AAKD,OATD;AAUD;;AACD,WAAO,MAAM,CAAE,CAAf;AACD,GApGQ,EAoGN,EApGM,CAAT;;AAsGA,QAAMgB,aAAa,GAAG,YAAY;AAChChC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,UAAMiC,IAAI,GAAG,MAAMjE,eAAe,CAACE,QAAD,CAAlC;;AAEA,QAAImB,UAAJ,EAAgB;AACdK,MAAAA,QAAQ,CAACL,UAAD,CAAR;AACD,KAFD,MAEO;AACLK,MAAAA,QAAQ,CAACuC,IAAI,CAAC5D,KAAN,CAAR;AACD;;AAEDoB,IAAAA,UAAU,CAACwC,IAAI,CAACzC,OAAN,CAAV;AACAD,IAAAA,OAAO,CAAC0C,IAAI,CAACC,KAAN,CAAP;AAEA/C,IAAAA,WAAW,CAAC,KAAD,CAAX;AAEAa,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAjBD;;AAmBAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,OAAJ,EAAa;AACX8C,MAAAA,aAAa;AACd;;AAED,WAAO,MAAM,CAAE,CAAf;AACD,GANQ,EAMN,CAAC9C,OAAD,CANM,CAAT;AAQA,sBACE,uDACE,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEM,OAAxB;AAAiC,IAAA,IAAI,EAAEF,IAAvC;AAA6C,IAAA,KAAK,EAAEjB,KAApD;AAA2D,IAAA,OAAO,EAAEY,OAApE;AAA6E,IAAA,OAAO,EAAEU,OAAtF;AAA+F,IAAA,SAAS,EAAEI,SAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA1LM","sourcesContent":["import React, { FC, useState, useEffect, Fragment } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { getListAndItems } from \"Components\";\r\nimport { Icons } from \"Components\";\r\n\r\ninterface TableProps {\r\n  listName: string;\r\n  tableTitle?: string;\r\n  isDirty?: boolean;\r\n  options?: Object;\r\n  addItem?: boolean;\r\n  addOptions?: Object;\r\n  deleteItem?: boolean;\r\n  editItem?: boolean;\r\n  changeItemPermission?: boolean;\r\n  customActions?: Array<Object>;\r\n  handleDirty?: Function;\r\n}\r\n\r\nexport const Table: FC<TableProps> = ({\r\n  listName,\r\n  addItem = true,\r\n  addOptions = {\r\n    title: \"Add Item\",\r\n    content: \"Content\",\r\n    saveButtonText: \"Save\",\r\n    saveAction: () => {\r\n      console.log(\"I am saved\");\r\n    },\r\n    cancelButtonText: \"Cancel\",\r\n    cancelAction: () => {\r\n      console.log(\"I am lost\");\r\n    },\r\n  },\r\n  deleteItem = true,\r\n  editItem = true,\r\n  changeItemPermission = true,\r\n  customActions,\r\n  options,\r\n  isDirty = true,\r\n  handleDirty = (dirty: boolean) => {\r\n    console.log(`handleDirty Default has been passed '${dirty}'`);\r\n  },\r\n  tableTitle,\r\n}) => {\r\n  const [data, setData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [actions, setActions] = useState([]);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [dialogTitle, setDialogTitle] = useState();\r\n  const [dialogContent, setDialogContent] = useState();\r\n  const [dialogSaveButtonText, setDialogSaveButtonText] = useState();\r\n  const [dialogSaveAction, setDialogSaveAction] = useState();\r\n  const [dialogCancelButtonText, setDialogCancelButtonText] = useState();\r\n  const [dialogCancelAction, setDialogCancelAction] = useState();\r\n\r\n  const saveButtonHandler = (results: Object) => {\r\n    //@ts-ignore\r\n    addOptions.saveAction(results);\r\n    handleDirty(true);\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  const cancelButtonHandler = (results: Object) => {\r\n    //@ts-ignore\r\n    addOptions.cancelAction(results);\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (addItem) {\r\n      setActions((prevActions) => {\r\n        prevActions.push({\r\n          //@ts-ignore\r\n          icon: icons.Add,\r\n          //@ts-ignore\r\n          tooltip: \"Add Item\",\r\n          //@ts-ignore\r\n          isFreeAction: true,\r\n          //@ts-ignore\r\n          onClick: (event, rowdata) => {\r\n            //@ts-ignore\r\n            setDialogTitle(addOptions.title);\r\n            //@ts-ignore\r\n            setDialogContent(addOptions.content);\r\n            //@ts-ignore\r\n            setDialogSaveButtonText(addOptions.saveButtonText);\r\n            //@ts-ignore\r\n            setDialogCancelButtonText(addOptions.cancelButtonText);\r\n            //@ts-ignore\r\n            setDialogCancelAction(() => {\r\n              return () => {\r\n                setIsLoading(false);\r\n                //@ts-ignore\r\n                addOptions.cancelAction();\r\n              };\r\n            });\r\n            setDialogOpen(true);\r\n          },\r\n        });\r\n\r\n        return prevActions;\r\n      });\r\n    }\r\n\r\n    if (deleteItem) {\r\n      setActions((prevActions) => {\r\n        prevActions.push({\r\n          //@ts-ignore\r\n          icon: icons.Delete,\r\n          //@ts-ignore\r\n          tooltip: \"Delete Item\",\r\n          //@ts-ignore\r\n          onClick: (event, rowdata) => {\r\n            //TODO: delete item actions\r\n          },\r\n        });\r\n\r\n        return prevActions;\r\n      });\r\n    }\r\n\r\n    if (editItem) {\r\n      setActions((prevActions) => {\r\n        prevActions.push({\r\n          //@ts-ignore\r\n          icon: icons.Edit,\r\n          //@ts-ignore\r\n          tooltip: \"Edit Item\",\r\n          //@ts-ignore\r\n          onClick: (event, rowdata) => {\r\n            //TODO: edit item actions\r\n          },\r\n        });\r\n\r\n        return prevActions;\r\n      });\r\n    }\r\n\r\n    if (changeItemPermission) {\r\n      setActions((prevActions) => {\r\n        prevActions.push({\r\n          //@ts-ignore\r\n          icon: icons.People,\r\n          //@ts-ignore\r\n          tooltip: \"Change Item Permissions\",\r\n          //@ts-ignore\r\n          onClick: (event, rowdata) => {\r\n            //TODO: change item permissions actions\r\n          },\r\n        });\r\n\r\n        return prevActions;\r\n      });\r\n    }\r\n\r\n    if (customActions) {\r\n      customActions.map((action, index) => {\r\n        //@ts-ignore\r\n        action.icon = icons[action.icon];\r\n\r\n        return setActions((prevActions) => {\r\n          //@ts-ignore\r\n          prevActions.push(action);\r\n          return prevActions;\r\n        });\r\n      });\r\n    }\r\n    return () => {};\r\n  }, []);\r\n\r\n  const populateTable = async () => {\r\n    setIsLoading(true);\r\n\r\n    const list = await getListAndItems(listName);\r\n\r\n    if (tableTitle) {\r\n      setTitle(tableTitle);\r\n    } else {\r\n      setTitle(list.title);\r\n    }\r\n\r\n    setColumns(list.columns);\r\n    setData(list.items);\r\n\r\n    handleDirty(false);\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDirty) {\r\n      populateTable();\r\n    }\r\n\r\n    return () => {};\r\n  }, [isDirty]);\r\n\r\n  return (\r\n    <>\r\n      <MaterialTable columns={columns} data={data} title={title} options={options} actions={actions} isLoading={isLoading} />\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}