{"ast":null,"code":"var _jsxFileName = \"C:\\\\github\\\\citz-imb-sp-projectIntakeForm\\\\src\\\\components\\\\Table\\\\GetListAndItems.tsx\";\nimport React from \"react\";\nimport { GetList, GetListItems } from \"citz-imb-sp-utilities\";\nimport Moment from \"react-moment\";\n\nconst getList = async listName => {\n  let list = await GetList({\n    listName: listName,\n    expand: \"DefaultView,DefaultView/ViewFields,Fields,Items,Views,Views/ViewFields\"\n  });\n  console.log(\"list :>> \", list);\n  return list;\n};\n\nconst getListItems = async listName => {\n  let listItems = await GetListItems({\n    listName: listName\n  });\n  console.log(\"listItems :>> \", listItems);\n  return listItems;\n};\n\nconst getUserColumns = async (listName, list) => {\n  let userFieldNamesSelect = [];\n  let userFieldNamesExpand = []; //@ts-ignore\n\n  for (let i = 0; i < list.Fields.results.length; i++) {\n    // @ts-ignore\n    if ( // @ts-ignore\n    list.Fields.results[i].FieldTypeKind === 2 && // @ts-ignore\n    list.Fields.results[i].StaticName !== \"_UIVersionString\" && // @ts-ignore\n    list.Fields.results[i].StaticName !== \"_CopySource\") {\n      //@ts-ignore\n      userFieldNamesSelect.push(list.Fields.results[i].StaticName);\n    } //@ts-ignore\n\n\n    console.log(\"list.Fields.results[i].StaticName :>> \", //@ts-ignore\n    list.Fields.results[i].StaticName, //@ts-ignore\n    list.Fields.results[i].FieldTypeKind, //@ts-ignore\n    list.Fields.results[i].TypeDisplayName, //@ts-ignore\n    list.Fields.results[i].TypeAsString);\n  } //@ts-ignore\n\n\n  for (let i = 0; i < list.Fields.results.length; i++) {\n    //@ts-ignore\n    if (list.Fields.results[i].FieldTypeKind === 20) {\n      //@ts-ignore\n      console.log(\"list.Fields.results[i] :>> \", list.Fields.results[i]); //@ts-ignore\n\n      userFieldNamesSelect.push(list.Fields.results[i].StaticName + \"/Title\"); //@ts-ignore\n\n      userFieldNamesExpand.push(list.Fields.results[i].StaticName);\n    }\n  }\n\n  console.log(\" userFieldNames :>> \", userFieldNamesSelect);\n  let listUserColumns = await GetListItems({\n    listName: listName,\n    expand: userFieldNamesExpand,\n    select: userFieldNamesSelect\n  });\n  console.log(\"listItems :>> \", listUserColumns);\n  return listUserColumns;\n};\n\nexport const getListAndItems = async listName => {\n  let title, columns, items, views, list, listUserColumns;\n  list = await getList(listName);\n  items = await getListItems(listName);\n  listUserColumns = await getUserColumns(listName, list);\n  views = list.Views.results.map(view => {\n    //@ts-ignore\n    return {\n      title: view.Title,\n      fields: view.ViewFields.Items.results\n    };\n  });\n  console.log(\"views :>> \", views);\n  title = list.Title;\n  let listColumns = {};\n\n  for (let i = 0; i < list.Fields.results.length; i++) {\n    //@ts-ignore\n    listColumns[list.Fields.results[i].InternalName] = {\n      Title: list.Fields.results[i].Title,\n      FieldTypeKind: list.Fields.results[i].FieldTypeKind\n    };\n  } //Table Columns\n\n\n  columns = list.DefaultView.ViewFields.Items.results.map(field => {\n    let fieldObject = {\n      //@ts-ignore\n      title: listColumns[field].Title,\n      field: field\n    }; //@ts-ignore\n\n    if (listColumns[field].FieldTypeKind === 4) {\n      //datetime\n      //@ts-ignore\n      fieldObject.render = rowdata => {\n        return /*#__PURE__*/React.createElement(Moment, {\n          fromNowDuring: 3600000,\n          format: \"dddd, MMMM Do, YYYY @ h:mm a\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }\n        }, rowdata[field]);\n      };\n    } else if ( //@ts-ignore\n    listColumns[field].FieldTypeKind === 3 //multilinetext\n    ) {\n        //@ts-ignore\n        fieldObject.render = rowdata => {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: rowdata[field]\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 11\n            }\n          });\n        };\n      }\n\n    if (field === \"LinkTitle\") {\n      //@ts-ignore\n      fieldObject.render = rowdata => {\n        return /*#__PURE__*/React.createElement(\"a\", {\n          href: rowdata.File.ServerRelativeUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 16\n          }\n        }, rowdata.Title);\n      };\n    }\n\n    return fieldObject;\n  });\n  return {\n    title,\n    columns,\n    items,\n    views\n  };\n};","map":{"version":3,"sources":["C:/github/citz-imb-sp-projectIntakeForm/src/components/Table/GetListAndItems.tsx"],"names":["React","GetList","GetListItems","Moment","getList","listName","list","expand","console","log","getListItems","listItems","getUserColumns","userFieldNamesSelect","userFieldNamesExpand","i","Fields","results","length","FieldTypeKind","StaticName","push","TypeDisplayName","TypeAsString","listUserColumns","select","getListAndItems","title","columns","items","views","Views","map","view","Title","fields","ViewFields","Items","listColumns","InternalName","DefaultView","field","fieldObject","render","rowdata","__html","File","ServerRelativeUrl"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { GetList, GetListItems } from \"citz-imb-sp-utilities\";\r\nimport Moment from \"react-moment\";\r\n\r\nconst getList = async (listName: string) => {\r\n  let list = await GetList({\r\n    listName: listName,\r\n    expand: \"DefaultView,DefaultView/ViewFields,Fields,Items,Views,Views/ViewFields\",\r\n  });\r\n  console.log(\"list :>> \", list);\r\n  return list;\r\n};\r\n\r\nconst getListItems = async (listName: string) => {\r\n  let listItems = await GetListItems({\r\n    listName: listName,\r\n  });\r\n  console.log(\"listItems :>> \", listItems);\r\n  return listItems;\r\n};\r\n\r\nconst getUserColumns = async (listName: string, list: Array<object>) => {\r\n  let userFieldNamesSelect: never[] = [];\r\n  let userFieldNamesExpand = [];\r\n  //@ts-ignore\r\n  for (let i = 0; i < list.Fields.results.length; i++) {\r\n    // @ts-ignore\r\n    if (\r\n      // @ts-ignore\r\n      list.Fields.results[i].FieldTypeKind === 2 &&\r\n      // @ts-ignore\r\n      list.Fields.results[i].StaticName !== \"_UIVersionString\" &&\r\n      // @ts-ignore\r\n      list.Fields.results[i].StaticName !== \"_CopySource\"\r\n    ) {\r\n      //@ts-ignore\r\n      userFieldNamesSelect.push(list.Fields.results[i].StaticName);\r\n    }\r\n    //@ts-ignore\r\n    console.log(\r\n      \"list.Fields.results[i].StaticName :>> \",\r\n      //@ts-ignore\r\n      list.Fields.results[i].StaticName,\r\n      //@ts-ignore\r\n      list.Fields.results[i].FieldTypeKind,\r\n      //@ts-ignore\r\n      list.Fields.results[i].TypeDisplayName,\r\n      //@ts-ignore\r\n      list.Fields.results[i].TypeAsString\r\n    );\r\n  }\r\n\r\n  //@ts-ignore\r\n  for (let i = 0; i < list.Fields.results.length; i++) {\r\n    //@ts-ignore\r\n    if (list.Fields.results[i].FieldTypeKind === 20) {\r\n      //@ts-ignore\r\n      console.log(\"list.Fields.results[i] :>> \", list.Fields.results[i]);\r\n      //@ts-ignore\r\n      userFieldNamesSelect.push(list.Fields.results[i].StaticName + \"/Title\");\r\n      //@ts-ignore\r\n      userFieldNamesExpand.push(list.Fields.results[i].StaticName);\r\n    }\r\n  }\r\n\r\n  console.log(\" userFieldNames :>> \", userFieldNamesSelect);\r\n\r\n  let listUserColumns = await GetListItems({\r\n    listName: listName,\r\n    expand: userFieldNamesExpand,\r\n    select: userFieldNamesSelect,\r\n  });\r\n  console.log(\"listItems :>> \", listUserColumns);\r\n  return listUserColumns;\r\n};\r\n\r\nexport const getListAndItems = async (listName: string) => {\r\n  let title, columns, items, views, list, listUserColumns;\r\n  list = await getList(listName);\r\n  items = await getListItems(listName);\r\n  listUserColumns = await getUserColumns(listName, list);\r\n  views = list.Views.results.map((view: Object) => {\r\n    //@ts-ignore\r\n    return { title: view.Title, fields: view.ViewFields.Items.results };\r\n  });\r\n  console.log(\"views :>> \", views);\r\n  title = list.Title;\r\n\r\n  let listColumns = {};\r\n  for (let i = 0; i < list.Fields.results.length; i++) {\r\n    //@ts-ignore\r\n    listColumns[list.Fields.results[i].InternalName] = {\r\n      Title: list.Fields.results[i].Title,\r\n      FieldTypeKind: list.Fields.results[i].FieldTypeKind,\r\n    };\r\n  }\r\n\r\n  //Table Columns\r\n\r\n  columns = list.DefaultView.ViewFields.Items.results.map((field: string) => {\r\n    let fieldObject = {\r\n      //@ts-ignore\r\n      title: listColumns[field].Title,\r\n      field: field,\r\n    };\r\n    //@ts-ignore\r\n    if (listColumns[field].FieldTypeKind === 4) {\r\n      //datetime\r\n      //@ts-ignore\r\n      fieldObject.render = (rowdata) => {\r\n        return (\r\n          <Moment fromNowDuring={3600000} format={\"dddd, MMMM Do, YYYY @ h:mm a\"}>\r\n            {rowdata[field]}\r\n          </Moment>\r\n        );\r\n      };\r\n    } else if (\r\n      //@ts-ignore\r\n      listColumns[field].FieldTypeKind === 3 //multilinetext\r\n    ) {\r\n      //@ts-ignore\r\n      fieldObject.render = (rowdata) => {\r\n        return (\r\n          <div\r\n            dangerouslySetInnerHTML={{\r\n              __html: rowdata[field],\r\n            }}\r\n          />\r\n        );\r\n      };\r\n    }\r\n\r\n    if (field === \"LinkTitle\") {\r\n      //@ts-ignore\r\n      fieldObject.render = (rowdata) => {\r\n        return <a href={rowdata.File.ServerRelativeUrl}>{rowdata.Title}</a>;\r\n      };\r\n    }\r\n    return fieldObject;\r\n  });\r\n\r\n  return { title, columns, items, views };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}