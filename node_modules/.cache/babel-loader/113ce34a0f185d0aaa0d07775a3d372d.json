{"ast":null,"code":"var _jsxFileName = \"C:\\\\webProjects\\\\project-intake-form\\\\src\\\\components\\\\Table\\\\GetListAndItems.tsx\";\nimport React from \"react\";\nimport { GetList, GetListItems } from \"citz-imb-sp-utilities\";\nimport Moment from \"react-moment\";\n\nconst getList = async listName => {\n  let list = await GetList({\n    listName: listName,\n    expand: \"DefaultView,DefaultView/ViewFields,Fields,Items,Views,Views/ViewFields\"\n  });\n  console.log(\"list :>> \", list);\n  return list;\n};\n\nconst getListItems = async listName => {\n  let listItems = await GetListItems({\n    listName: listName,\n    expand: \"\"\n  });\n  console.log(\"listItems :>> \", listItems);\n  return listItems;\n};\n\nexport const getListAndItems = async listName => {\n  let title, columns, items, views;\n  let list = await getList(listName);\n  items = await getListItems(listName);\n  views = list.Views.results.map(view => {\n    //@ts-ignore\n    return {\n      title: view.Title,\n      fields: view.ViewFields.IOtresults\n    };\n  });\n  console.log(\"views :>> \", views);\n  title = list.Title;\n  let listColumns = {};\n\n  for (let i = 0; i < list.Fields.results.length; i++) {\n    //@ts-ignore\n    listColumns[list.Fields.results[i].InternalName] = {\n      Title: list.Fields.results[i].Title,\n      FieldTypeKind: list.Fields.results[i].FieldTypeKind\n    };\n\n    if (list.Fields.results[i].FieldTypeKind === 20) {\n      console.log(\"list.Fields.results[i] :>> \", list.Fields.results[i]);\n    }\n  } //Table Columns\n\n\n  columns = list.DefaultView.ViewFields.Items.results.map(field => {\n    let fieldObject = {\n      //@ts-ignore\n      title: listColumns[field].Title,\n      field: field\n    }; //@ts-ignore\n\n    if (listColumns[field].FieldTypeKind === 4) {\n      //datetime\n      //@ts-ignore\n      fieldObject.render = rowdata => {\n        return /*#__PURE__*/React.createElement(Moment, {\n          fromNowDuring: 3600000,\n          format: \"dddd, MMMM Do, YYYY @ h:mm a\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }\n        }, rowdata[field]);\n      };\n    } else if ( //@ts-ignore\n    listColumns[field].FieldTypeKind === 3 //multilinetext\n    ) {\n        //@ts-ignore\n        fieldObject.render = rowdata => {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: rowdata[field]\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 11\n            }\n          });\n        };\n      }\n\n    if (field === \"LinkTitle\") {\n      //@ts-ignore\n      fieldObject.render = rowdata => {\n        return /*#__PURE__*/React.createElement(\"a\", {\n          href: rowdata.File.ServerRelativeUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 16\n          }\n        }, rowdata.Title);\n      };\n    }\n\n    return fieldObject;\n  });\n  return {\n    title,\n    columns,\n    items\n  };\n};","map":{"version":3,"sources":["C:/webProjects/project-intake-form/src/components/Table/GetListAndItems.tsx"],"names":["React","GetList","GetListItems","Moment","getList","listName","list","expand","console","log","getListItems","listItems","getListAndItems","title","columns","items","views","Views","results","map","view","Title","fields","ViewFields","IOtresults","listColumns","i","Fields","length","InternalName","FieldTypeKind","DefaultView","Items","field","fieldObject","render","rowdata","__html","File","ServerRelativeUrl"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { GetList, GetListItems } from \"citz-imb-sp-utilities\";\r\nimport Moment from \"react-moment\";\r\n\r\nconst getList = async (listName: string) => {\r\n  let list = await GetList({\r\n    listName: listName,\r\n    expand: \"DefaultView,DefaultView/ViewFields,Fields,Items,Views,Views/ViewFields\",\r\n  });\r\n  console.log(\"list :>> \", list);\r\n  return list;\r\n};\r\n\r\nconst getListItems = async (listName: string) => {\r\n  let listItems = await GetListItems({\r\n    listName: listName,\r\n    expand: \"\",\r\n  });\r\n  console.log(\"listItems :>> \", listItems);\r\n  return listItems;\r\n};\r\n\r\nexport const getListAndItems = async (listName: string) => {\r\n  let title, columns, items, views;\r\n\r\n  let list = await getList(listName);\r\n  items = await getListItems(listName);\r\n  views = list.Views.results.map((view: Object) => {\r\n    //@ts-ignore\r\n    return { title: view.Title, fields: view.ViewFields.IOtresults };\r\n  });\r\n  console.log(\"views :>> \", views);\r\n  title = list.Title;\r\n\r\n  let listColumns = {};\r\n  for (let i = 0; i < list.Fields.results.length; i++) {\r\n    //@ts-ignore\r\n    listColumns[list.Fields.results[i].InternalName] = {\r\n      Title: list.Fields.results[i].Title,\r\n      FieldTypeKind: list.Fields.results[i].FieldTypeKind,\r\n    };\r\n    if (list.Fields.results[i].FieldTypeKind === 20) {\r\n      console.log(\"list.Fields.results[i] :>> \", list.Fields.results[i]);\r\n    }\r\n  }\r\n\r\n  //Table Columns\r\n\r\n  columns = list.DefaultView.ViewFields.Items.results.map((field: string) => {\r\n    let fieldObject = {\r\n      //@ts-ignore\r\n      title: listColumns[field].Title,\r\n      field: field,\r\n    };\r\n    //@ts-ignore\r\n    if (listColumns[field].FieldTypeKind === 4) {\r\n      //datetime\r\n      //@ts-ignore\r\n      fieldObject.render = (rowdata) => {\r\n        return (\r\n          <Moment fromNowDuring={3600000} format={\"dddd, MMMM Do, YYYY @ h:mm a\"}>\r\n            {rowdata[field]}\r\n          </Moment>\r\n        );\r\n      };\r\n    } else if (\r\n      //@ts-ignore\r\n      listColumns[field].FieldTypeKind === 3 //multilinetext\r\n    ) {\r\n      //@ts-ignore\r\n      fieldObject.render = (rowdata) => {\r\n        return (\r\n          <div\r\n            dangerouslySetInnerHTML={{\r\n              __html: rowdata[field],\r\n            }}\r\n          />\r\n        );\r\n      };\r\n    }\r\n\r\n    if (field === \"LinkTitle\") {\r\n      //@ts-ignore\r\n      fieldObject.render = (rowdata) => {\r\n        return <a href={rowdata.File.ServerRelativeUrl}>{rowdata.Title}</a>;\r\n      };\r\n    }\r\n    return fieldObject;\r\n  });\r\n\r\n  return { title, columns, items };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}