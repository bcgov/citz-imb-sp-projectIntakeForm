{"ast":null,"code":"var _jsxFileName = \"C:\\\\webProjects\\\\project-intake-form\\\\src\\\\components\\\\Table\\\\Table.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { getListAndItems } from \"Components\";\nexport const Table = ({\n  listName,\n  addOptions = {\n    title: \"Add Item\",\n    content: \"Content\",\n    saveButtonText: \"Save\",\n    saveAction: () => {\n      console.log(\"I am saved\");\n    },\n    cancelButtonText: \"Cancel\",\n    cancelAction: () => {\n      console.log(\"I am lost\");\n    }\n  },\n  options,\n  isDirty = true,\n  handleDirty = dirty => {\n    console.log(`handleDirty Default has been passed '${dirty}'`);\n  },\n  tableTitle\n}) => {\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [actions, setActions] = useState([]);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const saveButtonHandler = results => {\n    //@ts-ignore\n    addOptions.saveAction(results);\n    handleDirty(true);\n    setDialogOpen(false);\n  };\n\n  const cancelButtonHandler = results => {\n    //@ts-ignore\n    addOptions.cancelAction(results);\n    setDialogOpen(false);\n  };\n\n  const populateTable = async () => {\n    setIsLoading(true);\n    const list = await getListAndItems(listName);\n\n    if (tableTitle) {\n      setTitle(tableTitle);\n    } else {\n      setTitle(list.title);\n    }\n\n    setColumns(list.columns);\n    setData(list.items);\n    handleDirty(false);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    if (isDirty) {\n      populateTable();\n    }\n\n    return () => {};\n  }, [isDirty]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaterialTable, {\n    columns: columns,\n    data: data,\n    title: title,\n    options: options,\n    actions: actions,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["C:/webProjects/project-intake-form/src/components/Table/Table.tsx"],"names":["React","useState","useEffect","MaterialTable","getListAndItems","Table","listName","addOptions","title","content","saveButtonText","saveAction","console","log","cancelButtonText","cancelAction","options","isDirty","handleDirty","dirty","tableTitle","data","setData","columns","setColumns","setTitle","actions","setActions","dialogOpen","setDialogOpen","isLoading","setIsLoading","saveButtonHandler","results","cancelButtonHandler","populateTable","list","items"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect, Fragment } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { getListAndItems } from \"Components\";\r\nimport { Icons } from \"Components\";\r\n\r\ninterface TableProps {\r\n  listName: string;\r\n  tableTitle?: string;\r\n  isDirty?: boolean;\r\n  options?: Object;\r\n  addItem?: boolean;\r\n  addOptions?: Object;\r\n  deleteItem?: boolean;\r\n  editItem?: boolean;\r\n  changeItemPermission?: boolean;\r\n  customActions?: Array<Object>;\r\n  handleDirty?: Function;\r\n}\r\n\r\nexport const Table: FC<TableProps> = ({\r\n  listName,\r\n  addOptions = {\r\n    title: \"Add Item\",\r\n    content: \"Content\",\r\n    saveButtonText: \"Save\",\r\n    saveAction: () => {\r\n      console.log(\"I am saved\");\r\n    },\r\n    cancelButtonText: \"Cancel\",\r\n    cancelAction: () => {\r\n      console.log(\"I am lost\");\r\n    },\r\n  },\r\n  options,\r\n  isDirty = true,\r\n  handleDirty = (dirty: boolean) => {\r\n    console.log(`handleDirty Default has been passed '${dirty}'`);\r\n  },\r\n  tableTitle,\r\n}) => {\r\n  const [data, setData] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [actions, setActions] = useState([]);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const saveButtonHandler = (results: Object) => {\r\n    //@ts-ignore\r\n    addOptions.saveAction(results);\r\n    handleDirty(true);\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  const cancelButtonHandler = (results: Object) => {\r\n    //@ts-ignore\r\n    addOptions.cancelAction(results);\r\n    setDialogOpen(false);\r\n  };\r\n\r\n  const populateTable = async () => {\r\n    setIsLoading(true);\r\n\r\n    const list = await getListAndItems(listName);\r\n\r\n    if (tableTitle) {\r\n      setTitle(tableTitle);\r\n    } else {\r\n      setTitle(list.title);\r\n    }\r\n\r\n    setColumns(list.columns);\r\n    setData(list.items);\r\n\r\n    handleDirty(false);\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDirty) {\r\n      populateTable();\r\n    }\r\n\r\n    return () => {};\r\n  }, [isDirty]);\r\n\r\n  return (\r\n    <>\r\n      <MaterialTable columns={columns} data={data} title={title} options={options} actions={actions} isLoading={isLoading} />\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}