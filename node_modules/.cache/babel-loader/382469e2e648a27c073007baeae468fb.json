{"ast":null,"code":"var _jsxFileName = \"C:\\\\webProjects\\\\project-intake-form\\\\src\\\\components\\\\Table\\\\Table.tsx\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport MaterialTable from 'material-table';\nimport { SPDialog, getListAndItems } from 'Components';\nimport { icons } from 'Components';\nexport const SPList = ({\n  listName,\n  addItem = true,\n  addOptions = {\n    title: 'Add Item',\n    content: 'Content',\n    saveButtonText: 'Save',\n    saveAction: () => {\n      console.log('I am saved');\n    },\n    cancelButtonText: 'Cancel',\n    cancelAction: () => {\n      console.log('I am lost');\n    }\n  },\n  deleteItem = true,\n  editItem = true,\n  changeItemPermission = true,\n  customActions,\n  options,\n  isDirty = true,\n  handleDirty = dirty => {\n    console.log(`handleDirty Default has been passed '${dirty}'`);\n  },\n  tableTitle\n}) => {\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [title, setTitle] = useState('');\n  const [actions, setActions] = useState([]);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [dialogTitle, setDialogTitle] = useState();\n  const [dialogContent, setDialogContent] = useState();\n  const [dialogSaveButtonText, setDialogSaveButtonText] = useState();\n  const [dialogSaveAction, setDialogSaveAction] = useState();\n  const [dialogCancelButtonText, setDialogCancelButtonText] = useState();\n  const [dialogCancelAction, setDialogCancelAction] = useState();\n\n  const saveButtonHandler = results => {\n    addOptions.saveAction(results);\n    handleDirty(true);\n    setDialogOpen(false);\n  };\n\n  const cancelButtonHandler = results => {\n    addOptions.cancelAction(results);\n    setDialogOpen(false);\n  };\n\n  useEffect(() => {\n    if (addItem) {\n      setActions(prevActions => {\n        prevActions.push({\n          icon: icons.Add,\n          tooltip: 'Add Item',\n          isFreeAction: true,\n          onClick: (event, rowdata) => {\n            setDialogTitle(addOptions.title);\n            setDialogContent(addOptions.content);\n            setDialogSaveButtonText(addOptions.saveButtonText);\n            setDialogCancelButtonText(addOptions.cancelButtonText);\n            setDialogCancelAction(() => {\n              return () => {\n                setIsLoading(false);\n                addOptions.cancelAction();\n              };\n            });\n            setDialogOpen(true);\n          }\n        });\n        return prevActions;\n      });\n    }\n\n    if (deleteItem) {\n      setActions(prevActions => {\n        prevActions.push({\n          icon: icons.Delete,\n          tooltip: 'Delete Item',\n          onClick: (event, rowdata) => {//TODO: delete item actions\n          }\n        });\n        return prevActions;\n      });\n    }\n\n    if (editItem) {\n      setActions(prevActions => {\n        prevActions.push({\n          icon: icons.Edit,\n          tooltip: 'Edit Item',\n          onClick: (event, rowdata) => {//TODO: edit item actions\n          }\n        });\n        return prevActions;\n      });\n    }\n\n    if (changeItemPermission) {\n      setActions(prevActions => {\n        prevActions.push({\n          icon: icons.People,\n          tooltip: 'Change Item Permissions',\n          onClick: (event, rowdata) => {//TODO: change item permissions actions\n          }\n        });\n        return prevActions;\n      });\n    }\n\n    if (customActions) {\n      customActions.map((action, index) => {\n        action.icon = icons[action.icon];\n        return setActions(prevActions => {\n          prevActions.push(action);\n          return prevActions;\n        });\n      });\n    }\n\n    return () => {};\n  }, []);\n\n  const populateTable = async () => {\n    setIsLoading(true);\n    const list = await getListAndItems(listName);\n\n    if (tableTitle) {\n      setTitle(tableTitle);\n    } else {\n      setTitle(list.title);\n    }\n\n    setColumns(list.columns);\n    setData(list.items);\n    handleDirty(false);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    if (isDirty) {\n      populateTable();\n    }\n\n    return () => {};\n  }, [isDirty]);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(MaterialTable, {\n    columns: columns,\n    data: data,\n    title: title,\n    options: options,\n    actions: actions,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(SPDialog, {\n    open: dialogOpen,\n    title: dialogTitle,\n    content: dialogContent,\n    saveButtonText: dialogSaveButtonText,\n    saveButtonAction: saveButtonHandler,\n    cancelButtonText: dialogCancelButtonText,\n    cancelButtonAction: cancelButtonHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 4\n    }\n  }));\n};","map":{"version":3,"sources":["C:/webProjects/project-intake-form/src/components/Table/Table.tsx"],"names":["React","useState","useEffect","Fragment","MaterialTable","SPDialog","getListAndItems","icons","SPList","listName","addItem","addOptions","title","content","saveButtonText","saveAction","console","log","cancelButtonText","cancelAction","deleteItem","editItem","changeItemPermission","customActions","options","isDirty","handleDirty","dirty","tableTitle","data","setData","columns","setColumns","setTitle","actions","setActions","dialogOpen","setDialogOpen","isLoading","setIsLoading","dialogTitle","setDialogTitle","dialogContent","setDialogContent","dialogSaveButtonText","setDialogSaveButtonText","dialogSaveAction","setDialogSaveAction","dialogCancelButtonText","setDialogCancelButtonText","dialogCancelAction","setDialogCancelAction","saveButtonHandler","results","cancelButtonHandler","prevActions","push","icon","Add","tooltip","isFreeAction","onClick","event","rowdata","Delete","Edit","People","map","action","index","populateTable","list","items"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport { SPDialog, getListAndItems } from 'Components'\r\nimport { icons } from 'Components'\r\n\r\nexport const SPList = ({\r\n\tlistName,\r\n\taddItem = true,\r\n\taddOptions = {\r\n\t\ttitle: 'Add Item',\r\n\t\tcontent: 'Content',\r\n\t\tsaveButtonText: 'Save',\r\n\t\tsaveAction: () => {\r\n\t\t\tconsole.log('I am saved')\r\n\t\t},\r\n\t\tcancelButtonText: 'Cancel',\r\n\t\tcancelAction: () => {\r\n\t\t\tconsole.log('I am lost')\r\n\t\t},\r\n\t},\r\n\tdeleteItem = true,\r\n\teditItem = true,\r\n\tchangeItemPermission = true,\r\n\tcustomActions,\r\n\toptions,\r\n\tisDirty = true,\r\n\thandleDirty = (dirty) => {\r\n\t\tconsole.log(`handleDirty Default has been passed '${dirty}'`)\r\n\t},\r\n\ttableTitle,\r\n}) => {\r\n\tconst [data, setData] = useState([])\r\n\tconst [columns, setColumns] = useState([])\r\n\tconst [title, setTitle] = useState('')\r\n\tconst [actions, setActions] = useState([])\r\n\tconst [dialogOpen, setDialogOpen] = useState(false)\r\n\tconst [isLoading, setIsLoading] = useState(false)\r\n\tconst [dialogTitle, setDialogTitle] = useState()\r\n\tconst [dialogContent, setDialogContent] = useState()\r\n\tconst [dialogSaveButtonText, setDialogSaveButtonText] = useState()\r\n\tconst [dialogSaveAction, setDialogSaveAction] = useState()\r\n\tconst [dialogCancelButtonText, setDialogCancelButtonText] = useState()\r\n\tconst [dialogCancelAction, setDialogCancelAction] = useState()\r\n\r\n\tconst saveButtonHandler = (results) => {\r\n\t\taddOptions.saveAction(results)\r\n\t\thandleDirty(true)\r\n\t\tsetDialogOpen(false)\r\n\t}\r\n\r\n\tconst cancelButtonHandler = (results) => {\r\n\t\taddOptions.cancelAction(results)\r\n\t\tsetDialogOpen(false)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (addItem) {\r\n\t\t\tsetActions((prevActions) => {\r\n\t\t\t\tprevActions.push({\r\n\t\t\t\t\ticon: icons.Add,\r\n\t\t\t\t\ttooltip: 'Add Item',\r\n\t\t\t\t\tisFreeAction: true,\r\n\t\t\t\t\tonClick: (event, rowdata) => {\r\n\t\t\t\t\t\tsetDialogTitle(addOptions.title)\r\n\t\t\t\t\t\tsetDialogContent(addOptions.content)\r\n\t\t\t\t\t\tsetDialogSaveButtonText(addOptions.saveButtonText)\r\n\r\n\t\t\t\t\t\tsetDialogCancelButtonText(addOptions.cancelButtonText)\r\n\t\t\t\t\t\tsetDialogCancelAction(() => {\r\n\t\t\t\t\t\t\treturn () => {\r\n\t\t\t\t\t\t\t\tsetIsLoading(false)\r\n\t\t\t\t\t\t\t\taddOptions.cancelAction()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\tsetDialogOpen(true)\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn prevActions\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (deleteItem) {\r\n\t\t\tsetActions((prevActions) => {\r\n\t\t\t\tprevActions.push({\r\n\t\t\t\t\ticon: icons.Delete,\r\n\t\t\t\t\ttooltip: 'Delete Item',\r\n\t\t\t\t\tonClick: (event, rowdata) => {\r\n\t\t\t\t\t\t//TODO: delete item actions\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn prevActions\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (editItem) {\r\n\t\t\tsetActions((prevActions) => {\r\n\t\t\t\tprevActions.push({\r\n\t\t\t\t\ticon: icons.Edit,\r\n\t\t\t\t\ttooltip: 'Edit Item',\r\n\t\t\t\t\tonClick: (event, rowdata) => {\r\n\t\t\t\t\t\t//TODO: edit item actions\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn prevActions\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (changeItemPermission) {\r\n\t\t\tsetActions((prevActions) => {\r\n\t\t\t\tprevActions.push({\r\n\t\t\t\t\ticon: icons.People,\r\n\t\t\t\t\ttooltip: 'Change Item Permissions',\r\n\t\t\t\t\tonClick: (event, rowdata) => {\r\n\t\t\t\t\t\t//TODO: change item permissions actions\r\n\t\t\t\t\t},\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn prevActions\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (customActions) {\r\n\t\t\tcustomActions.map((action, index) => {\r\n\t\t\t\taction.icon = icons[action.icon]\r\n\r\n\t\t\t\treturn setActions((prevActions) => {\r\n\t\t\t\t\tprevActions.push(action)\r\n\t\t\t\t\treturn prevActions\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn () => {}\r\n\t}, [])\r\n\r\n\tconst populateTable = async () => {\r\n\t\tsetIsLoading(true)\r\n\r\n\t\tconst list = await getListAndItems(listName)\r\n\r\n\t\tif (tableTitle) {\r\n\t\t\tsetTitle(tableTitle)\r\n\t\t} else {\r\n\t\t\tsetTitle(list.title)\r\n\t\t}\r\n\r\n\t\tsetColumns(list.columns)\r\n\t\tsetData(list.items)\r\n\r\n\t\thandleDirty(false)\r\n\r\n\t\tsetIsLoading(false)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isDirty) {\r\n\t\t\tpopulateTable()\r\n\t\t}\r\n\r\n\t\treturn () => {}\r\n\t}, [isDirty])\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<MaterialTable\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tdata={data}\r\n\t\t\t\ttitle={title}\r\n\t\t\t\toptions={options}\r\n\t\t\t\tactions={actions}\r\n\t\t\t\tisLoading={isLoading}\r\n\t\t\t/>\r\n\t\t\t<SPDialog\r\n\t\t\t\topen={dialogOpen}\r\n\t\t\t\ttitle={dialogTitle}\r\n\t\t\t\tcontent={dialogContent}\r\n\t\t\t\tsaveButtonText={dialogSaveButtonText}\r\n\t\t\t\tsaveButtonAction={saveButtonHandler}\r\n\t\t\t\tcancelButtonText={dialogCancelButtonText}\r\n\t\t\t\tcancelButtonAction={cancelButtonHandler}\r\n\t\t\t/>\r\n\t\t</Fragment>\r\n\t)\r\n}"]},"metadata":{},"sourceType":"module"}